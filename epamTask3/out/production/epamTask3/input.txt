    Модификатор final используется для определения констант в качестве члена
класса, локальной переменной или параметра метода. Методы, объявленные
как final, нельзя замещать в подклассах. Для классов, объявленных со специ-
фикатором final, нельзя создавать подклассы. Например:
public class Card {
// инициализированная константа экземпляра
public final int ID = (int)(Math.random() * 10_000_000);
// неинициализированная константа
public final long BANK_ID; // инициализация по умолчанию не производится!
// { BANK_ID = 11111111L; } // только один раз!!!
public Card (long id) {
// инициализация в конструкторе
BANK_ID = id; // только один раз!!!
}
public final boolean checkRights(final int NUMBER) {
final int CODE = 72173394; // антишаблон: "Волшебное Число"
// ID = 1; // ошибка компиляции!
// NUMBER = 1; // ошибка компиляции!
// CODE = 1; // ошибка компиляции!
return CODE == NUMBER + ID;
}
}
    Константа может быть объявлена как поле класса, но не проинициализирована.
В этом случае она должна быть проинициализирована в логическом
блоке класса, заключенном в {}, или конструкторе, но только в одном из ука-
занных мест. Значение по умолчанию константа получить не может в отличие
от переменных класса. Константы могут быть объявлены в методах как локаль-
ные или как параметры метода. В обоих случаях значения таких констант из-
менять нельзя.
    Абстрактные методы размещаются в абстрактных классах или интерфейсах,
тела у таких методов отсутствуют и должны быть реализованы в подклассах.
public abstract class AbstractCardAction {
private Long account;
public AbstractCardAction () { }
/* тело абстрактного метода отсутствует */
public abstract void doPayment(double amountPayment);
public void setAccount(Long account) {
this.account = account;
}
}
    При этом становится невозможным создание экземпляра:
AbstractCardAction ap = new AbstractCardAction(); // compile error
    Спецификатор abstract присутствует здесь как в объявлении метода, так
и в объявлении класса.
    В отличие от интерфейсов абстрактный класс может содержать и абстрактные,
и неабстрактные методы, а может и не содержать ни одного абстрактного метода.
   